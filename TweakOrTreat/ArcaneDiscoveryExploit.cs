using CallOfTheWild;
using Kingmaker.Blueprints;
using Kingmaker.Blueprints.Classes;
using Kingmaker.Blueprints.Classes.Prerequisites;
using Kingmaker.Blueprints.Classes.Spells;
using Kingmaker.UnitLogic;
using Kingmaker.UnitLogic.Mechanics.Components;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace TweakOrTreat
{
    class ArcaneDiscoveryExploit
    {
        public static BlueprintCharacterClass arcanist = CallOfTheWild.Arcanist.arcanist_class;
        static LibraryScriptableObject library => Main.library;
        static internal void load()
        {
            var exploits = CallOfTheWild.Arcanist.arcane_exploits;
            var extraExploit = CallOfTheWild.Arcanist.extra_arcane_exploit;
            var discoveries = CallOfTheWild.WizardDiscoveries.arcane_discovery;

            var arcaneDiscoveryExploit = library.CopyAndAdd(discoveries, "ArcanistArcaneDiscoveries", "");
            arcaneDiscoveryExploit.RemoveComponents<PrerequisiteClassLevel>();
            arcaneDiscoveryExploit.AllFeatures = new Kingmaker.Blueprints.Classes.BlueprintFeature[] { };
            arcaneDiscoveryExploit.SetDescription("An arcanist who selects this arcanist exploit learns an arcane discovery. When she learns an arcane discovery, her level must be high enough for her to qualify for that discovery, using half her arcanist level as her wizard level to determine whether she qualifies. The effects of any arcane discovery that she selects with this exploit apply only to arcanist spells that she casts, not to wizard spells, and she cannot select an arcane discovery in place of a feat (unless she also has wizard levels, in which case the discovery applies only to her wizard spells).");

            var timeStutter = CallOfTheWild.WizardDiscoveries.time_stutter;
            var oppositionResearch = CallOfTheWild.WizardDiscoveries.opposition_research;
            var idealize = CallOfTheWild.WizardDiscoveries.idealize;

            var timeStutterResource = library.Get<BlueprintAbilityResource>("8de0987fd9a2403a8ec822f42ad71895");
            var amount = Helpers.GetField(timeStutterResource, "m_MaxAmount");
            var amountClassDiv = Helpers.GetField<BlueprintCharacterClass[]>(amount, "ClassDiv").AddToArray(arcanist);
            Helpers.SetField(amount, "ClassDiv", amountClassDiv);
            Helpers.SetField(timeStutterResource, "m_MaxAmount", amount);

            var idealizeContext = idealize.GetComponent<ContextRankConfig>();
            BlueprintCharacterClass[] classes = Helpers.GetField<BlueprintCharacterClass[]>(idealizeContext, "m_Class");
            classes = classes.AddToArray(arcanist);
            Helpers.SetField(idealizeContext, "m_Class", classes);

            var arcanistOppositionResearch = library.CopyAndAdd(oppositionResearch, "ArcanistArcaneDiscoveries" + oppositionResearch.name, "");
            arcanistOppositionResearch.AllFeatures = new BlueprintFeature[] { };
            arcanistOppositionResearch.RemoveComponents<PrerequisiteClassLevel>();

            foreach (var school in oppositionResearch.AllFeatures)
            {
                var arcanistSchool = library.CopyAndAdd(school, "ArcanistArcaneDiscoveries" + school.name, "");
                CallOfTheWild.WizardDiscoveries.RemoveOppositionSchool schoolRemoval = arcanistSchool.GetComponent<CallOfTheWild.WizardDiscoveries.RemoveOppositionSchool>();
                arcanistSchool.RemoveComponents<CallOfTheWild.WizardDiscoveries.RemoveOppositionSchool>();
                arcanistSchool.RemoveComponents<PrerequisiteClassLevel>();
                arcanistSchool.AddComponent(Helpers.PrerequisiteClassLevel(arcanist, 18, false));

                arcanistSchool.AddComponent(Helpers.Create<RemoveOppositionSchoolArcanist>((s => s.school = schoolRemoval.school)));

                arcanistOppositionResearch.AllFeatures = arcanistOppositionResearch.AllFeatures.AddToArray(arcanistSchool);
            }

            arcaneDiscoveryExploit.AllFeatures = arcaneDiscoveryExploit.AllFeatures.AddToArray(arcanistOppositionResearch);



            foreach (var discovery in discoveries.AllFeatures) {
                if (discovery == oppositionResearch)
                    continue;

                //var arcanistDiscovery = library.CopyAndAdd(discovery, "ArcanistArcaneDiscoveries"+discovery.name, "");
                var levelPrereq = discovery.GetComponent<PrerequisiteClassLevel>();
                //arcanistDiscovery.RemoveComponents<PrerequisiteClassLevel>();

                if(levelPrereq != null)
                {
                    levelPrereq.Group = Prerequisite.GroupType.Any;
                    discovery.AddComponent(Helpers.PrerequisiteClassLevel(arcanist, 2*levelPrereq.Level, true));
                }

                arcaneDiscoveryExploit.AllFeatures = arcaneDiscoveryExploit.AllFeatures.AddToArray(discovery);
            }

            exploits.AllFeatures = exploits.AllFeatures.AddToArray(arcaneDiscoveryExploit);
            extraExploit.AllFeatures = extraExploit.AllFeatures.AddToArray(arcaneDiscoveryExploit);
        }

        public class RemoveOppositionSchoolArcanist : OwnedGameLogicComponent<UnitDescriptor>
        {
            public SpellSchool school;
            public override void OnFactActivate()
            {
                base.Owner.DemandSpellbook(arcanist).OppositionSchools.RemoveAll(s => s == this.school);
            }
        }
    }
}
